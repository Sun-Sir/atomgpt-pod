name: AtomGPT github action
on: [push, pull_request]

jobs:
  miniconda:
    name: Miniconda ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
            os: ["ubuntu-latest"]
    steps:
      - uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: test
          environment-file: environment.yml
          python-version: "3.9"
          auto-activate-base: false
      - shell: bash -l {0}
        run: |
          conda info
          conda list
      - name: Lint
        shell: bash -l {0}
        run: |
            conda install flake8 pycodestyle pydocstyle
            #flake8 --ignore E203,W503 --exclude=examples,tests,scripts --statistics --count --exit-zero intermat/calculators.py intermat/generate.py 
            #pycodestyle --ignore E203,W503 --exclude=examples,tests,scripts intermat
            #pydocstyle --match-dir=core --match-dir=io --match-dir=io --match-dir=ai --match-dir=analysis --match-dir=db --match-dir=tasks --count intermat
      
      - name: Run pytest
        shell: bash -l {0}
        run: |
            #source ~/.bashrc
            find . -type f > before_test_files.txt
            conda env create -f environment.yml
            conda activate atomgpt 
            pip install triton
            #conda install alignn dgl=2.1.0 pytorch torchvision torchaudio pytorch-cuda transformers peft trl triton  -c pytorch -c nvidia -y
            conda install pytest coverage codecov   -y
            #conda install pytest coverage codecov pandas numpy matplotlib phonopy scikit-learn jarvis-tools --quiet
            #export DGLBACKEND=pytorch
            #export CUDA_VISIBLE_DEVICES="-1"
            #pip install phonopy flake8 pytest pycodestyle pydocstyle codecov pytest-cov coverage
            
            python setup.py develop
            echo 'environment.yml'
            conda env export
            echo 'forward model'
            echo 'ls'
            ls 
            echo 'ls atomgpt'
            ls atomgpt
            echo 'atomgpt/examples/'
            ls atomgpt/examples/
            echo 'atomgpt/examples/forward_model/'
            ls atomgpt/examples/forward_model/ 
            python atomgpt/forward_models/forward_models.py --config_name atomgpt/examples/forward_model/config.json

            echo 'inverse model'
            #python atomgpt/examples/inverse_model/run.py            
            coverage run -m pytest
            coverage report -m -i
            codecov --token="b493c988-5235-4f38-b60a-a2b670435968"
            #codecov --token="85bd9c5d-9e55-4f6d-bd69-350ee5e3bb41"
            
            find . -type f > after_test_files.txt
            

